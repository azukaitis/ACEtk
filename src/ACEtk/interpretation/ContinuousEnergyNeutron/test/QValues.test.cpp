#include "catch.hpp"
#include "ACEtk.hpp"

using namespace njoy::ACEtk;

extern njoy::ACEtk::Table ACETable;

SCENARIO( "Finding Q-values" ){
  GIVEN( "reference Q-values" ){
    std::vector< double > refQs{
      -5.29778100000E+00, -1.21423000000E+01,  1.93405400000E+02, 
      -1.78856000000E+01, -7.68000000000E-05, -1.30400000000E-02, 
      -4.62000000000E-02, -5.13000000000E-02, -8.17000000000E-02, 
      -1.03000000000E-01, -1.34000000000E-01, -1.70700000000E-01,
      -1.74500000000E-01, -2.49100000000E-01, -2.93000000000E-01,
      -3.34000000000E-01, -3.65000000000E-01, -3.98000000000E-01,
      -4.30000000000E-01, -4.48000000000E-01, -5.50000000000E-01,
      -6.50000000000E-01, -7.70000000000E-01, -9.00000000000E-01,
      -1.06250000000E+00, -1.17000000000E+00, -1.25000000000E+00,
      -1.44000000000E+00, -1.59000000000E+00, -1.75000000000E+00,
      -1.85000000000E+00, -1.95000000000E+00, -2.15000000000E+00,
      -2.30000000000E+00, -2.39000000000E+00, -2.49280000000E+00,
      -2.94000000000E+00, -3.18900000000E+00, -3.38800000000E+00,
      -3.53800000000E+00, -3.63700000000E+00, -3.73700000000E+00,
      -3.83700000000E+00, -3.90900000000E+00, -4.97863600000E-01,
       6.54520000000E+00,  0.00000000000E+00,  0.00000000000E+00 };

    WHEN( "extracting the Qvalues" ){
      auto Qs = nc::QValues( ACETable );

      THEN( "the values can be verified" ){
        REQUIRE( 48 == Qs.size() );

        for( size_t i=0; i< Qs.size(); i++ ){
          REQUIRE( refQs[i] == Approx( Qs[i] ) );
        }
      }
    }
  } // GIVEN
} // SCENARIO
